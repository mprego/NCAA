x.t<-matrix(rnorm(20*2), ncol=2)
test<-data.frame(cbind(x=x.t, y=-1))
for(i in 1:nrow(test)) {
if(test[i,1]>test[i,2])
test[i,3]<-1
}
plot(test$V1~test$V2, col=(3-test$y))
test$y<-as.factor(test$y)
for(c in c(.0001,.001,.01,.1,1,5,10,20,100)) {    #error rates for test data for different costs
svm<-svm(y~., data=dat, cost=c, scale=FALSE)
pred<-predict(svm, newdata=test[,-3])
err<-sum(pred!=test[,3])/nrow(test)
print (paste0("cost: ", c, "  error: ", err))
}
### A'
x<-matrix(rnorm(20*2), ncol=2)
dat<-data.frame(cbind(x=x, y=-1))
for(i in 1:nrow(dat)) {
if(dat[i,1]>dat[i,2])
dat[i,3]<-1
}
plot(x, col=(3-dat$y))
dat$y<-as.factor(dat$y)
### B
tune<-tune(svm, y~., data=dat, kernel="linear", ranges=list(cost=c(.0001,.001,.01,.1,1,5,10,20,100)))   #CV for different costs
summary(tune)
bestmod <- tune$best.model
for(c in c(.0001,.001,.01,.1,1,5,10,20,100)) {    #error rates for training data for different costs
svm<-svm(y~., data=dat, cost=c, scale=FALSE)
pred<-predict(svm, newdata=dat[,-3])
err<-sum(pred!=dat[,3])/nrow(dat)
print (paste0("cost: ", c, "  error: ", err))
}
### C  also include old method just in case
x.t<-matrix(rnorm(20*2), ncol=2)
test<-data.frame(cbind(x=x.t, y=-1))
for(i in 1:nrow(test)) {
if(test[i,1]>test[i,2])
test[i,3]<-1
}
plot(test$V1~test$V2, col=(3-test$y))
test$y<-as.factor(test$y)
for(c in c(.0001,.001,.01,.1,1,5,10,20,100)) {    #error rates for test data for different costs
svm<-svm(y~., data=dat, cost=c, scale=FALSE)
pred<-predict(svm, newdata=test[,-3])
err<-sum(pred!=test[,3])/nrow(test)
print (paste0("cost: ", c, "  error: ", err))
}
x <- matrix(rnorm(20*2), ncol=2)
y <- c(rep(-1,10),rep(1,10))
x[y==1,] <- x[y==1,]+1         #creates data such that two classes are barely linearly separable
x[y==1,] <- x[y==1,]+.05
plot(x, col=(3-y))
dat<-data.frame(x=x, y=as.factor(y))
### B
tune<-tune(svm, y~., data=dat, kernel="linear", ranges=list(cost=c(.0001,.001,.01,.1,1,5,10,20,100)))   #CV for different costs
summary(tune)
bestmod <- tune$best.model
for(c in c(.0001,.001,.01,.1,1,5,10,20,100)) {    #error rates for training data for different costs
svm<-svm(y~., data=dat, cost=c, scale=FALSE)
pred<-predict(svm, newdata=dat[,-3])
err<-sum(pred!=dat[,3])/nrow(dat)
print (paste0("cost: ", c, "  error: ", err))
}
### C  also include old method just in case
x <- matrix(rnorm(20*2), ncol=2)
y <- c(rep(-1,10),rep(1,10))
x[y==1,] <- x[y==1,]+1         #creates data such that two classes are barely linearly separable
x[y==1,] <- x[y==1,]+.05
plot(x, col=(3-y))
test<-data.frame(x=x, y=as.factor(y))
for(c in c(.0001,.001,.01,.1,1,5,10,20,100)) {    #error rates for test data for different costs
svm<-svm(y~., data=dat, cost=c, scale=FALSE)
pred<-predict(svm, newdata=test[,-3])
err<-sum(pred!=test[,3])/nrow(test)
print (paste0("cost: ", c, "  error: ", err))
}
install.packages("superpc")
library(superpc)
set.seed(464)
x <- matrix(rnorm(1000*100), ncol = 100)
v1 <- svd(x[1:80, ])$v[ , 1]
y <- 2 + 5  *v1 + .05*rnorm(100)
xtest <- x
ytest <- 2 + 5*v1 + .05*rnorm(100)
censoring.status <- sample(c(rep(1, 80), rep(0, 20)))
censoring.status.test <- sample(c(rep(1, 80), rep(0, 20)))
featurenames <- paste("feature", as.character(1:1000), sep = "")
data <- list(x = x, y = y, censoring.status = censoring.status, featurenames = featurenames)
data.test <- list(x = xtest, y = ytest, censoring.status = censoring.status.test,
featurenames = featurenames)
# Train  the model. This step just computes the  scores for each feature.
train.obj <- superpc.train(data, type = "survival")
head(train.obj$feature.scores)
# Note for regression (non-survival) data, we leave the component "censoring.status"
# out of the data object, and call superpc.train with type = "regression".
# otherwise the superpc commands are all the same
##### Cross-validation #####
# Cross-validate the model in order to determine the best threshold
cv.obj <- superpc.cv(train.obj, data)
# Plot the cross-validation curves. From this plot we see that the 1st
# principal component is significant and the best threshold is around 0.7.
superpc.plotcv(cv.obj)
abline(v = 0.7)
lrtest.obj <- superpc.lrtest.curv(train.obj, data, data.test)
superpc.plot.lrtest(lrtest.obj)
abline(v = 0.7)
fit.cts <- superpc.predict(train.obj, data, data.test, threshold = 0.7, n.components = 3,
prediction.type = "continuous")
superpc.fit.to.outcome(train.obj, data.test, fit.cts$v.pred)
fit.groups <- superpc.predict(train.obj, data, data.test, threshold = 0.7,
n.components = 1, prediction.type = "discrete")
superpc.fit.to.outcome(train.obj, data.test, fit.groups$v.pred)
plot(survfit(Surv(data.test$y, data.test$censoring.status) ~ fit.groups$v.pred),
col = 2:3, xlab = "time", ylab = "Prob survival", main = "Kaplan-Meier Curve")
fit.red <- superpc.predict.red(train.obj, data, data.test, threshold = 0.7)
superpc.plotred.lrtest(fit.red)
fit.redcv <- superpc.predict.red.cv(fit.red, cv.obj, data, threshold = 0.7)
superpc.plotred.lrtest(fit.redcv)
# Finally we list the significant genes, in order of decreasing importance score
list_feat <- superpc.listfeatures(data.test, train.obj, fit.red, fitred.cv = fit.redcv)
summary(list_feat)
setwd("~/Documents/!Research/Github/NCAA")
library(devtools)
c('rvest','dplyr','pipeR') -> packages
lapply(packages, library, character.only = T) #loops through the packages and loads them
sched2_orig=read.csv('sched_v2.csv')
View(sched2_orig)
# Then i need to scrape its schedule
sched2_orig=read.csv('sched_v2.csv')
sched2=sched2_orig
for(i in 1:2000){}  nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,7]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
get_four_factors <- function(team, date_str) {
mnth=substr(date_str,6,8)
mnth=match(tolower(mnth), tolower(month.abb))
if(mnth<10)
mnth=paste0('0', mnth)
day=substr(date_str,10,nchar(date_str)-6)
if(as.integer(day)<10)
day=paste0('0',day)
year=substr(date_str, nchar(date_str)-3,nchar(date_str))
date=paste0(year,'-',mnth,'-',day,'-')
# Then i need to scrape its schedule
sched2_orig=read.csv('sched_v2.csv')
sched2=sched2_orig
for(i in 1:2000){}  nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,7]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
# Then i need to scrape its schedule
sched2_orig=read.csv('sched_v2.csv')
sched2=sched2_orig
for(i in 1:2000){  nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,7]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
# Then i need to go through its schedule and scrape the 4 factors plus pace
# export the giant game schedule in a csv
# Then i need to scrape its schedule
sched2_orig=read.csv('sched_v2.csv')
sched2=sched2_orig
for(i in 1:2000){  #nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,7]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
get_four_factors <- function(team, date_str) {
mnth=substr(date_str,6,8)
mnth=match(tolower(mnth), tolower(month.abb))
if(mnth<10)
mnth=paste0('0', mnth)
day=substr(date_str,10,nchar(date_str)-6)
if(as.integer(day)<10)
day=paste0('0',day)
year=substr(date_str, nchar(date_str)-3,nchar(date_str))
date=paste0(year,'-',mnth,'-',day,'-')
css_page<-'#four_factors'
url<-'http://www.sports-reference.com/cbb/boxscores/' %>>% paste0(date) %>>% paste0(team) %>>% paste0('.html')
print (url)
url %>>%
html%>>%
html_nodes(css_page)%>>%
html_table(header = F) %>>%
data.frame() %>>%
tbl_df() -> total_table
colnames(total_table)<-total_table[2,]
total_table<-total_table[-c(1,2),]
return(total_table)
}
sched2_orig=read.csv('sched_v2.csv')
sched2=sched2_orig
for(i in 1:2000){  #nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,7]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
# Then i need to go through its schedule and scrape the 4 factors plus pace
# export the giant game schedule in a csv
# Then i need to scrape its schedule
sched2_orig=read.csv('sched_v2.csv')
sched2=sched2_orig
for(i in 1:2000){  #nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,8]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
for(i in 2000:4000){  #nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,8]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
for(i in 4000:6000){  #nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,8]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
for(i in 6000:8000){  #nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,8]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
for(i in 10000:nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,8]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
for(i in 8000:nrow(sched2)) {
print (i)
if(sched2[i,3]=='@') {
a=1
b=2
team=sched2[i,8]
}
else {
a=2
b=1
team=sched2[i,6]
}
team=as.character(team)
if(team=='vmi') {
team='virginia-military-institute'
}
print (team)
date_str=as.character(sched2[i,2])
stats=get_four_factors(team, date_str)
sched2[i,'Pace']=stats[1,'Pace']
sched2[i,'EFG']=stats[a,3]
sched2[i,'TOV']=stats[a,4]
sched2[i,'ORB']=stats[a,5]
sched2[i,'FTFGA']=stats[a,6]
sched2[i,'O_EFG']=stats[b,3]
sched2[i,'O_TOV']=stats[b,4]
sched2[i,'O_ORB']=stats[b,5]
sched2[i,'O_FTFGA']=stats[b,6]
}
sched2%>>%write.csv('sched_stats_v2.csv', row.names=FALSE)
